openapi: 3.0.3
info:
  title: WASAText API
  version: '1.0'
  description: |-
    API per l'applicazione WASAText che consente di chattare con le persone o gruppi di persone.
    Gli endpoint che agiscono sull'utente autenticato (es. setMyUserName, setMyPhoto)
    non richiedono un User ID nel percorso, poich√© l'identificativo viene estratto
    dall'header di autorizzazione della richiesta.
servers:
  - url: http://localhost:3000

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: If the user does not exist, it will be created, and an identifier is returned. If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  minLength: 3
                  maxLength: 16
              required:
                - name
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: integer
                    example: 30

  /me/name:
    put:
      tags: ["user"]
      summary: Updates the name of the authenticated user
      description: The name must be unique.
      operationId: setMyUserName
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/Name"
              required:
                - name
      responses:
        "200":
          description: Name changed successfully
        "409":
          description: New name is already in use
        "401":
          description: Unauthorized

  /me/photo:
    put:
      tags: ["user"]
      summary: Updates the authenticated user's profile photo
      operationId: setMyPhoto
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: New profile image
      responses:
        "200":
          description: Photo changed successfully
        "400":
          description: Invalid input, missing file or incorrect format
        "401":
          description: Unauthorized

  /users/search:
    get:
      tags: ["users"]
      summary: Searches for a user by name
      description: Returns a list of users whose names match the search query.
      operationId: searchUsers
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
          description: The username to search for.
      responses:
        "200":
          description: A list of users found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /conversations:
    get:
      tags: ["conversations"]
      summary: Gets the list of the authenticated user's conversations
      description: Returns all active conversations sorted by the newest message.
      operationId: getMyConversations
      responses:
        "200":
          description: List of conversations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Conversation"
        "401":
          description: Unauthorized
    post:
      tags: ["conversations"]
      summary: Starts a new conversation with a specific user
      description: Creates a new one-on-one conversation with a given user.
      operationId: startNewConversation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/Id"
              required:
                - userId
      responses:
        "201":
          description: Conversation started successfully
        "404":
          description: User not found

  /conversations/{conversationId}:
    parameters:
      - $ref: "#/components/parameters/conversationId"
    get:
      tags: ["conversations"]
      summary: Gets the messages of a specific conversation
      description: Returns a list of messages sorted from newest to oldest.
      operationId: getConversation
      responses:
        "200":
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
        "403":
          description: The user is not part of this conversation
        "404":
          description: Conversation not found
        "401":
          description: Unauthorized
    post:
      tags: ["conversations"]
      summary: Sends a new message to a conversation
      operationId: sendMessage
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Text content of the message.
                image:
                  type: string
                  format: binary
                  description: An image file.
                replyTo:
                  type: integer
                  description: The ID of the message being replied to.
                forwarded:
                  type: boolean
                  description: Indicates if the message is forwarded.
      responses:
        "200":
          description: Message sent successfully
        "403":
          description: The user is not part of this conversation
        "404":
          description: Conversation not found
        "401":
          description: Unauthorized

  /messages/{messageId}:
    parameters:
      - $ref: "#/components/parameters/messageId"
    delete:
      tags: ["messages"]
      summary: Deletes a sent message
      operationId: deleteMessage
      responses:
        "200":
          description: Message deleted successfully
        "403":
          description: User is not the sender of the message
        "404":
          description: Message not found
        "401":
          description: Unauthorized

  /messages/{messageId}/forward:
    parameters:
      - $ref: "#/components/parameters/messageId"
    post:
      tags: ["messages"]
      summary: Forwards an existing message to multiple conversations
      operationId: forwardMessage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                conversationIds:
                  type: array
                  items:
                    $ref: "#/components/schemas/Id"
                  description: List of conversation IDs to forward the message to.
              required:
                - conversationIds
      responses:
        "200":
          description: Message forwarded successfully
        "403":
          description: User is not authorized to forward to one or more conversations
        "404":
          description: Message or conversation not found
        "401":
          description: Unauthorized

  /messages/{messageId}/reactions:
    parameters:
      - $ref: "#/components/parameters/messageId"
    post:
      tags: ["messages"]
      summary: Adds a reaction to a message
      operationId: commentMessage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                emoji:
                  $ref: "#/components/schemas/Reaction"
              required:
                - emoji
      responses:
        "200":
          description: Reaction added successfully
        "404":
          description: Message not found
        "401":
          description: Unauthorized
    delete:
      tags: ["messages"]
      summary: Removes a reaction from a message
      description: Removes the authenticated user's reaction to a message.
      operationId: uncommentMessage
      responses:
        "200":
          description: Reaction removed successfully
        "404":
          description: Reaction or message not found
        "401":
          description: Unauthorized

  /groups:
    post:
      tags: ["groups"]
      summary: Creates a new group
      description: Creates a new group with an initial list of members.
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/Name"
                memberIds:
                  type: array
                  items:
                    $ref: "#/components/schemas/Id"
              required:
                - name
                - memberIds
      responses:
        "201":
          description: Group created successfully

  /groups/{groupId}/name:
    parameters:
      - $ref: "#/components/parameters/groupId"
    put:
      tags: ["groups"]
      summary: Updates the name of a group
      operationId: setGroupName
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/Name"
              required:
                - name
      responses:
        "200":
          description: Name changed successfully
        "403":
          description: User is not a member of the group
        "404":
          description: Group not found

  /groups/{groupId}/photo:
    parameters:
      - $ref: "#/components/parameters/groupId"
    put:
      tags: ["groups"]
      summary: Updates the group profile photo
      operationId: setGroupPhoto
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: New group photo.
      responses:
        "200":
          description: Photo changed successfully
        "400":
          description: Invalid input, missing file or incorrect format
        "403":
          description: User is not a member of the group
        "404":
          description: Group not found

  /groups/{groupId}/members:
    parameters:
      - $ref: "#/components/parameters/groupId"
    post:
      tags: ["groups"]
      summary: Adds a list of users to a group
      operationId: addToGroup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    $ref: "#/components/schemas/Id"
                  description: List of user IDs to add to the group.
              required:
                - userIds
      responses:
        "200":
          description: Users added successfully
        "403":
          description: User is not a member of the group
        "404":
          description: Group or one of the users not found

  /groups/{groupId}/members/{userId}:
    parameters:
      - $ref: "#/components/parameters/groupId"
      - $ref: "#/components/parameters/userId"
    delete:
      tags: ["groups"]
      summary: Makes a user leave a group
      operationId: leaveGroup
      responses:
        "200":
          description: User left the group successfully
        "404":
          description: Group or user not found
        "403":
          description: User is not a member of the group

components:
  schemas:
    Id:
      description: A unique identifier.
      type: integer
      example: 1234
    Name:
      description: A new username or group name.
      type: string
      example: "Emanuele Panizzi"
    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          $ref: "#/components/schemas/Name"
        photo:
          $ref: "#/components/schemas/PhotoUrl"
    PhotoUrl:
      description: URL to a photo resource.
      type: string
      example: "/user/profile-photo/123"
    Reaction:
      description: Emoji used in a reaction.
      type: string
      example: "üëç"
    Message:
      title: Message
      description: Represents a single message in a conversation.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        state:
          description: Status of the message (sent, delivered, read).
          type: string
          enum: ["sent", "delivered", "read"]
          example: "sent"
        sentAt:
          description: Timestamp when the message was sent.
          type: string
          format: date-time
          example: "2025-09-24T10:00:00Z"
        content:
          description: Text content of the message.
          type: string
          nullable: true
          example: "Nice pasta bro üçù"
        photo:
          description: URL to a photo message resource.
          type: string
          nullable: true
          example: "/messages/photo/54321"
        replyTo:
          description: ID of the message being replied to.
          type: integer
          nullable: true
          example: 30
        isForwarded:
          description: Indicates if the message is forwarded.
          type: boolean
          example: false
        senderName:
          description: Name of the user who sent the message.
          type: string
          example: "Emanuele Panizzi"
        reactions:
          type: array
          items:
            type: object
            properties:
              emoji:
                $ref: "#/components/schemas/Reaction"
              userId:
                $ref: "#/components/schemas/Id"
    Conversation:
      title: Conversation
      description: Represents a single conversation.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: The name of the other person or the group.
          type: string
          example: "Mario Rossi"
        photo:
          $ref: "#/components/schemas/PhotoUrl"
        snippet:
          description: A preview of the latest message.
          type: string
          example: "Nice pasta bro"
        lastMessageAt:
          description: Timestamp of the latest message.
          type: string
          format: date-time
          example: "2025-09-24T10:00:00Z"
        isGroup:
          description: Indicates if the conversation is a group chat.
          type: boolean
          example: false
        recipientId:
          description: The user ID of the other person in a one-on-one chat.
          type: integer
          nullable: true
          example: 987

  parameters:
    conversationId:
      name: conversationId
      in: path
      required: true
      description: The unique identifier for a conversation.
      schema:
        $ref: "#/components/schemas/Id"
    messageId:
      name: messageId
      in: path
      required: true
      description: The unique identifier for a message.
      schema:
        $ref: "#/components/schemas/Id"
    groupId:
      name: groupId
      in: path
      required: true
      description: The unique identifier for a group.
      schema:
        $ref: "#/components/schemas/Id"
    userId:
      name: userId
      in: path
      required: true
      description: The unique identifier for a user.
      schema:
        $ref: "#/components/schemas/Id"