openapi: 3.0.3
info:
  title: WASAText API
  version: '1.0'
  description: |-
    API per l'applicazione WASAText che consente di chattare con le persone o gruppi di persone.
    Gli endpoint che agiscono sull'utente autenticato (es. setMyUserName, setMyPhoto)
    non richiedono un User ID nel percorso, poiché l'identificativo viene estratto
    dall'header di autorizzazione della richiesta.
servers:
  - url: http://localhost:3000

security:
  - bearerAuth: []

tags:
  - name: login
    description: "Endpoints related to user authentication."
  - name: user
    description: "Endpoints for managing the authenticated user's profile."
  - name: users
    description: "Endpoints for user search."
  - name: conversations
    description: "Endpoints for managing conversations and messages."
  - name: messages
    description: "Endpoints for specific message actions."
  - name: groups
    description: "Endpoints for group management."

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: If the user does not exist, it will be created, and an identifier is returned. If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details for login or registration (Name and Base64 Photo)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '201':
          description: User log-in action successful, returns the user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /me/name:
    put:
      tags: ["user"]
      summary: Updates the name of the authenticated user
      description: The name must be unique and adheres to the specified pattern. Returns the updated User object.
      operationId: setMyUserName
      requestBody:
        description: New name for the authenticated user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNameRequest'
      responses:
        "200":
          description: Name changed successfully, returns the updated User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "409":
          description: New name is already in use
        "401":
          description: Unauthorized

  /me/photo:
    put:
      tags: ["user"]
      summary: Updates the authenticated user's profile photo (Base64)
      description: Uploads a new profile photo (Base64) for the authenticated user and returns the updated User object.
      operationId: setMyPhoto
      requestBody:
        description: New profile photo file (Base64 encoded)
        required: true
        content:
          image/png:
            schema:
              $ref: '#/components/schemas/Base64Image'
              minLength: 1
          image/jpeg:
            schema:
              $ref: '#/components/schemas/Base64Image'
              minLength: 1
      responses:
        "200":
          description: Photo changed successfully, returns the updated User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid input, missing file or incorrect format
        "401":
          description: Unauthorized

  /users/search:
    get:
      tags: ["users"]
      summary: Searches for a user by name
      description: Returns a list of users whose names match the search query.
      operationId: searchUsers
      parameters:
        - in: query
          name: name
          schema:
            type: string
            minLength: 1
            maxLength: 50
            pattern: '^[a-zA-Z0-9_]+$'
          required: true
          description: The username substring to search for.
      responses:
        "200":
          description: A list of users found
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100
                items:
                  $ref: "#/components/schemas/User"

  /conversations:
    get:
      tags: ["conversations"]
      summary: Gets the list of the authenticated user's conversations
      description: Returns all active conversations sorted by the newest message summary.
      operationId: getMyConversations
      responses:
        "200":
          description: List of conversations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 500
                items:
                  $ref: "#/components/schemas/Conversation"
        "401":
          description: Unauthorized
    post:
      tags: ["conversations"]
      summary: Starts a new conversation with a specific user
      description: Creates a new one-on-one conversation with a given user ID and returns the full conversation details.
      operationId: startNewConversation
      requestBody:
        description: User ID of the recipient
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/Id"
              required:
                - userId
      responses:
        "201":
          description: Conversation started successfully, returns the full Conversation Details object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationDetails"
        "404":
          description: User not found
        "401":
          description: Unauthorized

  /conversations/{conversationId}:
    parameters:
      - $ref: "#/components/parameters/conversationId"
    get:
      tags: ["conversations"]
      summary: Gets the full details of a specific conversation
      description: Returns a list of messages sorted from newest to oldest within a Conversation Details object.
      operationId: getConversation
      responses:
        "200":
          description: Conversation Details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationDetails"
        "403":
          description: The user is not part of this conversation
        "404":
          description: Conversation not found
        "401":
          description: Unauthorized
    post:
      tags: ["conversations"]
      summary: Sends a new message to a conversation
      description: Sends a text message or a Base64 image attachment to the specified conversation.
      operationId: sendMessage
      requestBody:
        description: Message content (text and/or Base64 image) and options
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: Form data for sending a message.
              properties:
                content:
                  type: string
                  description: Testo del messaggio.
                  minLength: 1
                  maxLength: 1000
                attachment:
                  $ref: "#/components/schemas/Base64Image"
                  description: Allegato immagine opzionale (stringa Base64).
                  minLength: 0
                replyTo:
                  $ref: "#/components/schemas/Id"
                  description: L'ID del messaggio a cui si sta rispondendo (opzionale).
                  nullable: true
                forwarded:
                  type: boolean
                  description: Indica se il messaggio è inoltrato (opzionale).
                  default: false
                  nullable: true
              oneOf:
                - required: [content]
                - required: [attachment]
      responses:
        "200":
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        "403":
          description: The user is not part of this conversation
        "404":
          description: Conversation not found
        "401":
          description: Unauthorized

  /messages/{messageId}:
    parameters:
      - $ref: "#/components/parameters/messageId"
    delete:
      tags: ["messages"]
      summary: Deletes a sent message
      description: Allows the sender to delete a message they have sent.
      operationId: deleteMessage
      responses:
        "204":
          description: Message deleted successfully.
        "403":
          description: User is not the sender of the message
        "404":
          description: Message not found
        "401":
          description: Unauthorized

  /messages/{messageId}/forward:
    parameters:
      - $ref: "#/components/parameters/messageId"
    post:
      tags: ["messages"]
      summary: Forwards an existing message to multiple conversations
      description: Sends a copy of the message to a list of other conversations. Returns the new Message object.
      operationId: forwardMessage
      requestBody:
        description: List of conversation IDs to forward the message to
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForwardMessageRequest"
      responses:
        "200":
          description: Message forwarded successfully, returns the new Message object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        "403":
          description: User is not authorized to forward to one or more conversations
        "404":
          description: Message or conversation not found
        "401":
          description: Unauthorized

  /messages/{messageId}/reactions:
    parameters:
      - $ref: "#/components/parameters/messageId"
    post:
      tags: ["messages"]
      summary: Adds a reaction to a message
      description: Adds an emoji reaction to the specified message.
      operationId: commentMessage
      requestBody:
        description: Emoji for the reaction
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emoji:
                  $ref: "#/components/schemas/Reaction"
              required:
                - emoji
      responses:
        "204":
          description: Reaction added successfully.
        "404":
          description: Message not found
        "401":
          description: Unauthorized
    delete:
      tags: ["messages"]
      summary: Removes the authenticated user's reaction from a message
      description: Removes the authenticated user's reaction to a message.
      operationId: uncommentMessage
      responses:
        "204":
          description: Reaction removed successfully.
        "404":
          description: Reaction or message not found
        "401":
          description: Unauthorized

  /groups:
    post:
      tags: ["groups"]
      summary: Creates a new group
      description: Creates a new group with an initial list of members, using Base64 for the photo. Returns the canonical Group object.
      operationId: createGroup
      requestBody:
        description: Group name, Base64 image, and initial members (JSON string of IDs)
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: Form data for group creation.
              properties:
                name:
                  type: string
                  description: Name of the group.
                  example: "New Group"
                  pattern: '^[a-zA-Z0-9_ ]+$'
                  minLength: 3
                  maxLength: 50
                membersJson:
                  type: string
                  description: A JSON string array of member IDs.
                  example: '["user123","user456"]'
                  pattern: '^\[.*\]$'
                  minLength: 2
                  maxLength: 1000
                image:
                  $ref: "#/components/schemas/Base64Image"
                  description: Group image (Base64 encoded string).
                  minLength: 1
              required:
                - name
                - membersJson
                - image
      responses:
        "201":
          description: Group created successfully, returns the canonical Group object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"

  /groups/{groupId}/name:
    parameters:
      - $ref: "#/components/parameters/groupId"
    put:
      tags: ["groups"]
      summary: Updates the name of a group
      description: Changes the name of the specified group and returns the updated Group object.
      operationId: setGroupName
      requestBody:
        description: New name for the group
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNameRequest'
      responses:
        "200":
          description: Name changed successfully, returns the updated Group object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        "403":
          description: User is not a member of the group
        "404":
          description: Group not found

  /groups/{groupId}/photo:
    parameters:
      - $ref: "#/components/parameters/groupId"
    put:
      tags: ["groups"]
      summary: Updates the group profile photo (Base64)
      description: Uploads a new profile photo (Base64) for the group and returns the updated Group object.
      operationId: setGroupPhoto
      requestBody:
        description: New group photo file (Base64 encoded)
        required: true
        content:
          image/png:
            schema:
              $ref: '#/components/schemas/Base64Image'
              minLength: 1
          image/jpeg:
            schema:
              $ref: '#/components/schemas/Base64Image'
              minLength: 1
      responses:
        "200":
          description: Photo changed successfully, returns the updated Group object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        "400":
          description: Invalid input, missing file or incorrect format
        "403":
          description: User is not a member of the group
        "404":
          description: Group not found

  /groups/{groupId}/members:
    parameters:
      - $ref: "#/components/parameters/groupId"
    post:
      tags: ["groups"]
      summary: Adds a list of users to a group
      description: Adds specified users to the existing group.
      operationId: addToGroup
      requestBody:
        description: List of user IDs to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddGroupMemberRequest'
      responses:
        "200":
          description: Users added successfully
          content: {}
        "403":
          description: User is not a member of the group
        "404":
          description: Group or one of the users not found

  /groups/{groupId}/members/{userId}:
    parameters:
      - $ref: "#/components/parameters/groupId"
      - $ref: "#/components/parameters/userId"
    delete:
      tags: ["groups"]
      summary: Makes a user leave a group
      description: Removes the specified user from the group.
      operationId: leaveGroup
      responses:
        "204":
          description: User left the group successfully.
        "404":
          description: Group or user not found
        "403":
          description: User is not a member of the group

components:
  schemas:
    Id:
      description: A unique identifier (string).
      type: string
      example: "user123"
      pattern: '^[a-zA-Z0-9_]+$'
      minLength: 1
      maxLength: 50
    Name:
      description: A new username or group name, between 3 and 16 characters.
      type: string
      example: "NewUser_1"
      minLength: 3
      maxLength: 16
      pattern: '^[a-zA-Z0-9_]+$'
    Base64Image:
      description: Photo/Image content as a Base64-encoded string (up to 10MB).
      type: string
      example: "aGVsbG8="
      pattern: '^[A-Za-z0-9+/]*={0,2}$'
      minLength: 0
      maxLength: 10485760
    LoginRequest:
      type: object
      description: Request schema for user login.
      required:
        - name
        - photo
      properties:
        name:
          $ref: "#/components/schemas/Name"
        photo:
          $ref: "#/components/schemas/Base64Image"
          minLength: 1
    LoginResponse:
      type: object
      description: Response schema for user login.
      properties:
        identifier:
          $ref: "#/components/schemas/Id"
      required:
        - identifier
    UpdateNameRequest:
      type: object
      description: Request schema for updating user or group name.
      required:
        - name
      properties:
        name:
          $ref: "#/components/schemas/Name"
    ForwardMessageRequest:
      type: object
      description: Request schema for forwarding a message.
      required:
        - conversationIds
      properties:
        conversationIds:
          type: array
          items:
            $ref: "#/components/schemas/Id"
          minItems: 1
          maxItems: 50
          description: List of conversation IDs to forward the message to.
    AddGroupMemberRequest:
      type: object
      description: Request schema for adding a group member.
      required:
        - userIds
      properties:
        userIds:
          type: array
          items:
            $ref: "#/components/schemas/Id"
          minItems: 1
          maxItems: 50
          description: List of user IDs to add to the group.
    User:
      type: object
      description: Represents a user with basic profile information.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          $ref: "#/components/schemas/Name"
        photo:
          $ref: "#/components/schemas/Base64Image"
      required:
        - id
        - name
        - photo
    Reaction:
      description: Emoji used in a reaction (single character).
      type: string
      example: "🎉"
      minLength: 1
      maxLength: 1
    Message:
      title: Message
      description: Represents a single message in a conversation.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        state:
          description: Status of the message (sent, delivered, read).
          type: string
          enum: ["sent", "delivered", "read"]
          example: "read"
        sentAt:
          description: Timestamp when the message was sent.
          type: string
          format: date-time
          example: "2025-10-07T12:00:00Z"
        senderId:
          $ref: "#/components/schemas/Id"
        senderName:
          description: Name of the user who sent the message.
          type: string
          example: "Pippo qualcosa"
          minLength: 1
          maxLength: 50
        content:
          description: Text content of the message.
          type: string
          example: "Ciao! Come stai?"
          minLength: 1
          maxLength: 1000
        attachment:
          $ref: "#/components/schemas/Base64Image"
          description: Optional image attachment in Base64 encoding.
        replyTo:
          $ref: "#/components/schemas/Id"
          description: The ID of the message being replied to (opzionale).
          nullable: true
        isForwarded:
          description: Indicates if the message is forwarded.
          type: boolean
          example: true
        reactions:
          description: List of reactions to the message.
          type: array
          items:
            type: object
            description: A single reaction with emoji and user ID.
            properties:
              emoji:
                $ref: "#/components/schemas/Reaction"
              userId:
                $ref: "#/components/schemas/Id"
          maxItems: 20
      required:
        - id
        - state
        - sentAt
        - senderId
        - senderName
        - content
        - attachment
        - isForwarded
        - reactions
    Conversation:
      title: Conversation
      description: Represents a summary of a single conversation.
      type: object
      required:
        - id
        - name
        - members
        - isGroup
        - lastMessage
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: The name of the other person or the group.
          type: string
          example: "Web Architecture Team"
          minLength: 1
          maxLength: 50
        members:
          type: array
          description: List of user IDs participating in the conversation.
          minItems: 1
          maxItems: 1000
          items:
            $ref: '#/components/schemas/Id'
        photo:
          $ref: "#/components/schemas/Base64Image"
        isGroup:
          description: Indicates if the conversation is a group chat.
          type: boolean
          example: true
        lastMessage:
          $ref: "#/components/schemas/Message"
    ConversationDetails:
      title: Conversation Details
      description: Detailed conversation schema, including all messages.
      allOf:
        - $ref: "#/components/schemas/Conversation"
        - type: object
          properties:
            messages:
              type: array
              description: List of messages in the conversation.
              minItems: 0
              maxItems: 1000
              items:
                $ref: '#/components/schemas/Message'
          required:
            - messages
    Group:
      type: object
      description: Group schema.
      required:
        - id
        - name
        - members
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          description: Name of the group.
          example: "Group Chat"
          pattern: '^[a-zA-Z0-9_ ]+$'
          minLength: 3
          maxLength: 50
        members:
          type: array
          description: List of user IDs that are members of the group.
          minItems: 1
          maxItems: 1000
          items:
            $ref: "#/components/schemas/Id"
        photo:
          $ref: "#/components/schemas/Base64Image"

  parameters:
    conversationId:
      name: conversationId
      in: path
      required: true
      description: The unique identifier for a conversation.
      schema:
        $ref: "#/components/schemas/Id"
    messageId:
      name: messageId
      in: path
      required: true
      description: The unique identifier for a message.
      schema:
        $ref: "#/components/schemas/Id"
    groupId:
      name: groupId
      in: path
      required: true
      description: The unique identifier for a group.
      schema:
        $ref: "#/components/schemas/Id"
    userId:
      name: userId
      in: path
      required: true
      description: The unique identifier for a user.
      schema:
        $ref: "#/components/schemas/Id"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
