openapi: 3.0.3
info:
  title: WASAText API
  version: '1.0'
  description: |-
    API per l'applicazione WASAText che consente di chattare con le persone o gruppi di persone.
    Gli endpoint che agiscono sull'utente autenticato (es. setMyUserName, setMyPhoto)
    non richiedono un User ID nel percorso, poiché l'identificativo viene estratto
    dall'header di autorizzazione della richiesta.
servers:
  - url: http://localhost:3000

security:
  - bearerAuth: []

tags:
  - name: login
    description: "Endpoints related to user authentication."
  - name: user
    description: "Endpoints for managing the authenticated user's profile."
  - name: users
    description: "Endpoints for user search."
  - name: conversations
    description: "Endpoints for managing conversations and messages."
  - name: messages
    description: "Endpoints for specific message actions."
  - name: groups
    description: "Endpoints for group management."

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: If the user does not exist, it will be created, and an identifier is returned. If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details for login or registration
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  minLength: 3
                  maxLength: 16
                  pattern: "^[a-zA-Z0-9_-]{3,16}$"
                  description: The user's desired username.
              required:
                - name
      responses:
        '201':
          description: User log-in action successful, returns the user ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: integer
                    example: 30
                    description: The unique identifier for the user.

  /me/name:
    put:
      tags: ["user"]
      summary: Updates the name of the authenticated user
      description: The name must be unique and adheres to the specified pattern.
      operationId: setMyUserName
      requestBody:
        description: New name for the authenticated user
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/Name"
              required:
                - name
      responses:
        "200":
          description: Name changed successfully
          content: {}
        "409":
          description: New name is already in use
        "401":
          description: Unauthorized

  /me/photo:
    put:
      tags: ["user"]
      summary: Updates the authenticated user's profile photo
      description: Uploads a new profile photo for the authenticated user.
      operationId: setMyPhoto
      requestBody:
        description: New profile photo file
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: New profile image file (e.g., JPEG, PNG)
              required:
                - image
      responses:
        "200":
          description: Photo changed successfully
          content: {}
        "400":
          description: Invalid input, missing file or incorrect format
        "401":
          description: Unauthorized

  /users/search:
    get:
      tags: ["users"]
      summary: Searches for a user by name
      description: Returns a list of users whose names match the search query.
      operationId: searchUsers
      parameters:
        - in: query
          name: name
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: The username substring to search for.
      responses:
        "200":
          description: A list of users found
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100 # Aggiunto maxItems per l'array
                items:
                  $ref: "#/components/schemas/User"

  /conversations:
    get:
      tags: ["conversations"]
      summary: Gets the list of the authenticated user's conversations
      description: Returns all active conversations sorted by the newest message.
      operationId: getMyConversations
      responses:
        "200":
          description: List of conversations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 500 # Aggiunto maxItems per l'array
                items:
                  $ref: "#/components/schemas/Conversation"
        "401":
          description: Unauthorized
    post:
      tags: ["conversations"]
      summary: Starts a new conversation with a specific user
      description: Creates a new one-on-one conversation with a given user ID.
      operationId: startNewConversation
      requestBody:
        description: User ID of the recipient
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: "#/components/schemas/Id"
              required:
                - userId
      responses:
        "201":
          description: Conversation started successfully, returns the conversation ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversationId:
                    $ref: "#/components/schemas/Id"
        "404":
          description: User not found
        "401":
          description: Unauthorized

  /conversations/{conversationId}:
    parameters:
      - $ref: "#/components/parameters/conversationId"
    get:
      tags: ["conversations"]
      summary: Gets the messages of a specific conversation
      description: Returns a list of messages sorted from newest to oldest.
      operationId: getConversation
      responses:
        "200":
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 50 # Aggiunto maxItems per l'array
                items:
                  $ref: "#/components/schemas/Message"
        "403":
          description: The user is not part of this conversation
        "404":
          description: Conversation not found
        "401":
          description: Unauthorized
    post:
      tags: ["conversations"]
      summary: Sends a new message to a conversation
      description: Sends a text or image message to the specified conversation.
      operationId: sendMessage
      requestBody:
        description: Message content (text and/or image) and options
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Text content of the message.
                  minLength: 1
                  maxLength: 2000
                image:
                  type: string
                  format: binary
                  description: An optional image file for the message.
                replyTo:
                  type: integer
                  description: The ID of the message being replied to (optional).
                  nullable: true # Lasciato nullable solo qui, perché non è un parametro REQUIRED.
                forwarded:
                  type: boolean
                  description: Indicates if the message is forwarded (optional).
                  default: false
                  nullable: true # Lasciato nullable solo qui, perché non è un parametro REQUIRED.
              # Aggiunta la validazione per assicurare che almeno una proprietà sia presente
              oneOf:
                - required: [content]
                - required: [image]
      responses:
        "200":
          description: Message sent successfully
          content: {}
        "403":
          description: The user is not part of this conversation
        "404":
          description: Conversation not found
        "401":
          description: Unauthorized

  /messages/{messageId}:
    parameters:
      - $ref: "#/components/parameters/messageId"
    delete:
      tags: ["messages"]
      summary: Deletes a sent message
      description: Allows the sender to delete a message they have sent.
      operationId: deleteMessage
      responses:
        "200":
          description: Message deleted successfully
          content: {}
        "403":
          description: User is not the sender of the message
        "404":
          description: Message not found
        "401":
          description: Unauthorized

  /messages/{messageId}/forward:
    parameters:
      - $ref: "#/components/parameters/messageId"
    post:
      tags: ["messages"]
      summary: Forwards an existing message to multiple conversations
      description: Sends a copy of the message to a list of other conversations.
      operationId: forwardMessage
      requestBody:
        description: List of conversation IDs to forward the message to
        content:
          application/json:
            schema:
              type: object
              properties:
                conversationIds:
                  type: array
                  items:
                    $ref: "#/components/schemas/Id"
                  minItems: 1
                  maxItems: 50
                  description: List of conversation IDs to forward the message to.
              required:
                - conversationIds
      responses:
        "200":
          description: Message forwarded successfully
          content: {}
        "403":
          description: User is not authorized to forward to one or more conversations
        "404":
          description: Message or conversation not found
        "401":
          description: Unauthorized

  /messages/{messageId}/reactions:
    parameters:
      - $ref: "#/components/parameters/messageId"
    post:
      tags: ["messages"]
      summary: Adds a reaction to a message
      description: Adds an emoji reaction to the specified message.
      operationId: commentMessage
      requestBody:
        description: Emoji for the reaction
        content:
          application/json:
            schema:
              type: object
              properties:
                emoji:
                  $ref: "#/components/schemas/Reaction"
              required:
                - emoji
      responses:
        "200":
          description: Reaction added successfully
          content: {}
        "404":
          description: Message not found
        "401":
          description: Unauthorized
    delete:
      tags: ["messages"]
      summary: Removes a reaction from a message
      description: Removes the authenticated user's reaction to a message.
      operationId: uncommentMessage
      responses:
        "200":
          description: Reaction removed successfully
          content: {}
        "404":
          description: Reaction or message not found
        "401":
          description: Unauthorized

  /groups:
    post:
      tags: ["groups"]
      summary: Creates a new group
      description: Creates a new group with an initial list of members.
      operationId: createGroup
      requestBody:
        description: Group name and initial members
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/Name"
                memberIds:
                  type: array
                  items:
                    $ref: "#/components/schemas/Id"
                  minItems: 1
                  maxItems: 50
                  description: List of user IDs to add to the group.
              required:
                - name
                - memberIds
      responses:
        "201":
          description: Group created successfully, returns the group ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  groupId:
                    $ref: "#/components/schemas/Id"

  /groups/{groupId}/name:
    parameters:
      - $ref: "#/components/parameters/groupId"
    put:
      tags: ["groups"]
      summary: Updates the name of a group
      description: Changes the name of the specified group.
      operationId: setGroupName
      requestBody:
        description: New name for the group
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/Name"
              required:
                - name
      responses:
        "200":
          description: Name changed successfully
          content: {}
        "403":
          description: User is not a member of the group
        "404":
          description: Group not found

  /groups/{groupId}/photo:
    parameters:
      - $ref: "#/components/parameters/groupId"
    put:
      tags: ["groups"]
      summary: Updates the group profile photo
      description: Uploads a new profile photo for the group.
      operationId: setGroupPhoto
      requestBody:
        description: New group photo file
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: New group photo file (e.g., JPEG, PNG).
              required:
                - image
      responses:
        "200":
          description: Photo changed successfully
          content: {}
        "400":
          description: Invalid input, missing file or incorrect format
        "403":
          description: User is not a member of the group
        "404":
          description: Group not found

  /groups/{groupId}/members:
    parameters:
      - $ref: "#/components/parameters/groupId"
    post:
      tags: ["groups"]
      summary: Adds a list of users to a group
      description: Adds specified users to the existing group.
      operationId: addToGroup
      requestBody:
        description: List of user IDs to add
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    $ref: "#/components/schemas/Id"
                  minItems: 1
                  maxItems: 50
                  description: List of user IDs to add to the group.
              required:
                - userIds
      responses:
        "200":
          description: Users added successfully
          content: {}
        "403":
          description: User is not a member of the group
        "404":
          description: Group or one of the users not found

  /groups/{groupId}/members/{userId}:
    parameters:
      - $ref: "#/components/parameters/groupId"
      - $ref: "#/components/parameters/userId"
    delete:
      tags: ["groups"]
      summary: Makes a user leave a group
      description: Removes the specified user from the group.
      operationId: leaveGroup
      responses:
        "200":
          description: User left the group successfully
          content: {}
        "404":
          description: Group or user not found
        "403":
          description: User is not a member of the group

components:
  schemas:
    Id:
      description: A unique identifier (integer).
      type: integer
      example: 1234
    Name:
      description: A new username or group name, between 3 and 16 characters.
      type: string
      example: "Emanuele Panizzi"
      minLength: 3
      maxLength: 16
    User:
      type: object
      description: Represents a user with basic profile information.
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          $ref: "#/components/schemas/Name"
        photo:
          $ref: "#/components/schemas/PhotoUrl"
      required:
        - id
        - name
        - photo # ERRORE CORRETTO: Aggiunto 'required' per User
    PhotoUrl:
      description: URL to a photo resource.
      type: string
      example: "/user/profile-photo/123"
      minLength: 1
      maxLength: 255 # Aggiunto maxLength
    Reaction:
      description: Emoji used in a reaction (single character).
      type: string
      example: "👍"
      minLength: 1
      maxLength: 1
    Message:
      title: Message
      description: Represents a single message in a conversation.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        state:
          description: Status of the message (sent, delivered, read).
          type: string
          enum: ["sent", "delivered", "read"]
          example: "sent"
        sentAt:
          description: Timestamp when the message was sent.
          type: string
          format: date-time
          example: "2025-09-24T10:00:00Z"
        content:
          description: Text content of the message.
          type: string
          nullable: true # Nonostante il warning, mantenuto nullable perché ha senso che sia opzionale (se è presente solo la foto)
          example: "Nice pasta bro 🍝"
          minLength: 1
          maxLength: 2000
        photo:
          description: URL to a photo message resource.
          type: string
          nullable: true # Mantenuto nullable
          example: "/messages/photo/54321"
          minLength: 1
          maxLength: 255 # Aggiunto maxLength
        replyTo:
          description: ID of the message being replied to.
          type: integer
          nullable: true # Mantenuto nullable
          example: 30
        isForwarded:
          description: Indicates if the message is forwarded.
          type: boolean
          example: false
        senderName:
          description: Name of the user who sent the message.
          type: string
          example: "Emanuele Panizzi"
          minLength: 1
          maxLength: 16 # Aggiunto maxLength (usando la stessa del Name)
        reactions:
          description: List of reactions to the message.
          type: array
          items:
            type: object
            description: A single reaction with emoji and user ID.
            properties:
              emoji:
                $ref: "#/components/schemas/Reaction"
              userId:
                $ref: "#/components/schemas/Id"
          maxItems: 20 # Aggiunto maxItems per le reazioni
      required:
        - id
        - state
        - sentAt
        - isForwarded
        - senderName
        - reactions # ERRORE CORRETTO: Aggiunto 'required' per Message
    Conversation:
      title: Conversation
      description: Represents a single conversation (one-on-one or group).
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: The name of the other person or the group.
          type: string
          example: "Mario Rossi"
          minLength: 1
          maxLength: 100 # Aggiunto maxLength
        photo:
          $ref: "#/components/schemas/PhotoUrl"
        snippet:
          description: A preview of the latest message.
          type: string
          example: "Nice pasta bro"
          minLength: 1
          maxLength: 200 # Aggiunto maxLength
        lastMessageAt:
          description: Timestamp of the latest message.
          type: string
          format: date-time
          example: "2025-09-24T10:00:00Z"
        isGroup:
          description: Indicates if the conversation is a group chat.
          type: boolean
          example: false
        recipientId:
          description: The user ID of the other person in a one-on-one chat. Null for group chats.
          type: integer
          nullable: true # Mantenuto nullable
          example: 987
      required:
        - id
        - name
        - photo
        - snippet
        - lastMessageAt
        - isGroup


  parameters:
    conversationId:
      name: conversationId
      in: path
      required: true
      description: The unique identifier for a conversation.
      schema:
        $ref: "#/components/schemas/Id"
    messageId:
      name: messageId
      in: path
      required: true
      description: The unique identifier for a message.
      schema:
        $ref: "#/components/schemas/Id"
    groupId:
      name: groupId
      in: path
      required: true
      description: The unique identifier for a group.
      schema:
        $ref: "#/components/schemas/Id"
    userId:
      name: userId
      in: path
      required: true
      description: The unique identifier for a user.
      schema:
        $ref: "#/components/schemas/Id"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT